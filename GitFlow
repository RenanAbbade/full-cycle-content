Introdu√ß√£o ao GitFlow

- Claro! Vamos entender o **Git Flow** de forma simples e estruturada:

---

## üöÄ O que √© **Git Flow**?

**Git Flow** √© uma estrat√©gia de **ramifica√ß√£o (branching model)** para projetos Git, criada por Vincent Driessen, que ajuda a organizar o trabalho em equipe com clareza e controle.

### üéØ Objetivo:

> Definir regras de como e quando criar branches, como nomear, e qual o fluxo para integrar novas features, corrigir bugs e lan√ßar vers√µes.

---

## üß± Estrutura b√°sica do Git Flow

### 1. **Branches principais:**

* `main` (ou `master`):
  Cont√©m **c√≥digo est√°vel e pronto para produ√ß√£o**.

* `develop`:
  Cont√©m c√≥digo com as **√∫ltimas funcionalidades em desenvolvimento** (prepara√ß√£o para futura release).

---

### 2. **Branches auxiliares:**

| Tipo de Branch | Origem    | Destino            | Finalidade                                          |
| -------------- | --------- | ------------------ | --------------------------------------------------- |
| `feature/*`    | `develop` | `develop`          | Desenvolvimento de novas funcionalidades            |
| `release/*`    | `develop` | `main` e `develop` | Prepara√ß√£o para nova vers√£o                         |
| `hotfix/*`     | `main`    | `main` e `develop` | Corre√ß√µes urgentes direto na produ√ß√£o               |
| `bugfix/*`     | `develop` | `develop`          | Corre√ß√µes de bugs que ainda n√£o foram para produ√ß√£o |

---

## üîÅ Fluxo de trabalho passo a passo

### ‚úÖ 1. **Come√ßo do projeto**

```bash
git init
git checkout -b develop
```

---

### ‚úÖ 2. **Criar uma feature**

```bash
git checkout develop
git checkout -b feature/nome-da-feature
# ...trabalha no c√≥digo...
git commit -am "Adiciona nova feature"
git checkout develop
git merge feature/nome-da-feature
git branch -d feature/nome-da-feature
```

---

### ‚úÖ 3. **Preparar uma release**

```bash
git checkout develop
git checkout -b release/1.0.0
# ...faz ajustes finais, documenta√ß√£o, versionamento...
git commit -am "Prepara√ß√£o para vers√£o 1.0.0"
git checkout main
git merge release/1.0.0
git tag -a v1.0.0 -m "Release 1.0.0"
git checkout develop
git merge release/1.0.0
git branch -d release/1.0.0
```

---

### ‚úÖ 4. **Corrigir um bug urgente (hotfix)**

```bash
git checkout main
git checkout -b hotfix/1.0.1
# ...corrige o bug...
git commit -am "Corrige bug cr√≠tico"
git checkout main
git merge hotfix/1.0.1
git tag -a v1.0.1 -m "Hotfix 1.0.1"
git checkout develop
git merge hotfix/1.0.1
git branch -d hotfix/1.0.1
```

---

## üß∞ Como aplicar no seu projeto

### Op√ß√£o 1: Manualmente (como nos exemplos acima)

Ideal para times pequenos ou quando se quer controle completo.

### Op√ß√£o 2: Usando a ferramenta `git flow` (automatiza o processo)

1. Instale:

```bash
# Debian/Ubuntu
sudo apt install git-flow
# macOS
brew install git-flow
```

2. Inicialize:

```bash
git flow init
# Ele vai perguntar os nomes dos branches (default: main e develop)
```

3. Usar comandos como:

```bash
git flow feature start minha-feature
git flow feature finish minha-feature

git flow release start 1.0.0
git flow release finish 1.0.0

git flow hotfix start urgente
git flow hotfix finish urgente
```

---

## üìå Vantagens do Git Flow

* Organiza√ß√£o clara de vers√µes e desenvolvimento
* Evita push de c√≥digo inst√°vel na `main`
* Permite m√∫ltiplas features e corre√ß√µes paralelas
* Ideal para projetos com **entregas em ciclos/versionamento**

---

## ‚ö†Ô∏è Desvantagens / Quando **n√£o** usar

* Pode ser **complexo demais para projetos pequenos ou times √°geis**
* Fluxo **pesado** para ambientes com entrega cont√≠nua (CI/CD), onde `main` e `develop` n√£o s√£o necess√°rios
* Alternativas modernas: **GitHub Flow**, **GitLab Flow**, **Trunk Based Development**

---

